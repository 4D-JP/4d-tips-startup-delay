/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Startup Delay
 #	author : miyako
 #	2015/10/15
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

namespace SD {
    int delayTime;
    NSString *thisBundleId = @"com.4D.4DPlugin.startup-delay";
    NSString *startupDelayTimeKey = @"StartupDelayTime";
    void sleep(int *delayTime){
        NSLog(@"Startup Delay:Going to sleep for %i seconds", *delayTime);
        [NSThread sleepForTimeInterval:*delayTime];
        NSLog(@"Startup Delay:Back from sleep");    
    }
    void init(){
        NSBundle *bundle = [NSBundle bundleWithIdentifier:SD::thisBundleId];
        if(bundle){
            SD::delayTime = [[bundle objectForInfoDictionaryKey:SD::startupDelayTimeKey]intValue];
            PA_RunInMainProcess((PA_RunInMainProcessProcPtr)SD::sleep, &SD::delayTime);
        }
    }
}

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
		case kInitPlugin :
			InitPlugin();//before On Startup, but not before Login
			break;

// --- Startup Delay

		case 1 :
			Get_startup_delay_time(pResult, pParams);
			break;

	}
}

void InitPlugin()
{
	SD::init();
}

// --------------------------------- Startup Delay --------------------------------


void Get_startup_delay_time(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT returnValue;

    returnValue.setIntValue(SD::delayTime);
	returnValue.setReturn(pResult);
}

